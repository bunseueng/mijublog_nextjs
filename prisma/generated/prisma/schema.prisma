// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id              String    @id @map("_id")
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  image_public_id String?
  description     String?
  password        String?
  createdAt       DateTime
  updatedAt       DateTime
  role            user_role @default(user)
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  sessions        Session[]
  accounts        Account[]

  // Relations
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  commentLikes CommentLike[]
  savedPosts   SavedPost[]

  // Following relationships
  following Follow[] @relation("UserFollowing")
  followers Follow[] @relation("UserFollowers")

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @map("_id")
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

enum user_role {
  admin
  user
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one save per user per post
  @@unique([postId, userId])
  @@map("saved_posts")
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  slug        String  @unique
  description String?
  color       String? // Hex color for UI

  // Relations
  posts Post[]

  @@map("categories")
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts PostTag[]

  @@map("tags")
}

model Post {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  slug                    String     @unique
  content                 String
  excerpt                 String?
  featuredImage           String?
  featuredImage_public_id String?
  status                  PostStatus @default(DRAFT)
  publishedAt             DateTime?
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt

  // SEO fields
  metaTitle       String?
  metaDescription String?

  // Analytics
  viewCount   Int  @default(0)
  readingTime Int? // in minutes
  wordCount   Int?

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  page_views PageView[]
  tags       PostTag[]
  comments   Comment[]
  likes      Like[]
  savedPosts SavedPost[]

  @@map("posts")
}

model PageView {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  postSlug String // The slug of the post being viewed
  userId   String? // Optional: null if the user is not logged in
  browser  String? // e.g., Chrome, Firefox, Safari
  referrer String? // e.g., Google, Twitter, Direct
  region   String? // e.g., "Cambodia", "US"
  timezone String? // e.g., "Asia/Phnom_Penh"

  createdAt DateTime @default(now())

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  // Self-referencing for replies
  parentId String?   @db.ObjectId
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")

  // Like
  likes CommentLike[]

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@map("comments")
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one like per user per comment
  @@unique([commentId, userId])
  @@map("comment_likes")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
